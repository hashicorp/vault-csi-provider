---
version: 2.1

references:
  images:
    go: &GOLANG_IMAGE docker.mirror.hashicorp.services/circleci/golang:1.17.2
    ubuntu: &UBUNTU_IMAGE ubuntu-2004:202107-02

  paths:
    test-results: &TEST_RESULTS_DIR /tmp/test-results
    working-directory: &WORKING_DIRECTORY /go/src/github.com/hashicorp/vault-csi-provider

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GOLANG_IMAGE: *GOLANG_IMAGE
    GOLANGCI_LINT_VERSION: "v1.42.1"
    K8S_VERSION: "v1.22.2"
    HELM_VERSION: "v3.7.1"
    KIND_VERSION: "v0.11.1"

jobs:
  lint:
    docker:
      - image: *GOLANG_IMAGE
    working_directory: *WORKING_DIRECTORY
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      # Install command from https://golangci-lint.run/usage/install/
      - run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${GOLANGCI_LINT_VERSION}
      - run: make lint

  gomod:
    docker:
      - image: *GOLANG_IMAGE
    working_directory: *WORKING_DIRECTORY
    steps:
      - checkout
      - run:
          name: go mod tidy
          command: |
            make mod
            if ! git diff --exit-code; then
              echo "Git directory has go.mod or go.sum changes"
              exit 1
            fi

  build:
    docker:
      - image: *GOLANG_IMAGE
    working_directory: *WORKING_DIRECTORY
    steps:
      - checkout
      - run: make build

  go-test:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      <<: *ENVIRONMENT
    working_directory: *WORKING_DIRECTORY
    steps:
      - checkout
      - run:
          name: unit tests
          command: |
            export CI_TEST_ARGS="--junitfile=${TEST_RESULTS_DIR}/go-test/results.xml --jsonfile=${TEST_RESULTS_DIR}/go-test/results.json"
            mkdir -p $TEST_RESULTS_DIR/go-test
            make test

      # Store the results so they display nicely in CircleCI.
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - store_test_results:
          path: *TEST_RESULTS_DIR

  integration-test:
    machine:
      image: *UBUNTU_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            # Install kubectl
            curl -Lo kubectl https://dl.k8s.io/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

            # Install helm
            curl -Lo helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz && tar -xvzf helm.tar.gz && sudo mv linux-amd64/helm /usr/local/bin/

            # Install kind
            curl -Lo kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-$(uname)-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/

            # Create a cluster, enabling all APIs
            make setup-kind

      - run:
          name: Run e2e tests
          command: |
            make e2e-container
            make e2e-setup
            export DISPLAY_SETUP_TEARDOWN_LOGS=true
            make e2e-test
            # Now switch the behaviour of --write-secrets and run the tests a second time.
            make e2e-switch-write-secrets
            make e2e-test

workflows:
  version: 2
  test-workflow:
    jobs:
      - lint
      - gomod
      - build:
          requires:
            - lint
            - gomod
      - go-test:
          requires:
            - lint
            - gomod
      - integration-test:
          requires:
            - build
            - go-test
